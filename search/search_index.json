{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DelFEM2 DelFEM2 is a toolset for Finite Element Analsys with Python/C++ Seemless integration with Numpy. Integrated CAD / Mesher / Solver / Visualizer Download Please download the latest project by cloning the GitHub repository Project layout docs # This document src_cpp / cpp # cpp files include # include files for cpp external # external dependencies module_py dfm2 # python module folder example_cpp # Cpp examples example_py # Python examples Python See the python examples C++ See the cpp examples Licence DelFEM2 is distributed under the MIT licence Contact DelFEM2 is currently developed and maintained by Nobuyuki Umetani . If you have questions or comments please contact . Copyright Nobuyuki Umetani -- All rights reserved.","title":"Home"},{"location":"#delfem2","text":"DelFEM2 is a toolset for Finite Element Analsys with Python/C++ Seemless integration with Numpy. Integrated CAD / Mesher / Solver / Visualizer","title":"DelFEM2"},{"location":"#download","text":"Please download the latest project by cloning the GitHub repository","title":"Download"},{"location":"#project-layout","text":"docs # This document src_cpp / cpp # cpp files include # include files for cpp external # external dependencies module_py dfm2 # python module folder example_cpp # Cpp examples example_py # Python examples","title":"Project layout"},{"location":"#python","text":"See the python examples","title":"Python"},{"location":"#c","text":"See the cpp examples","title":"C++"},{"location":"#licence","text":"DelFEM2 is distributed under the MIT licence","title":"Licence"},{"location":"#contact","text":"DelFEM2 is currently developed and maintained by Nobuyuki Umetani . If you have questions or comments please contact .","title":"Contact"},{"location":"#copyright","text":"Nobuyuki Umetani -- All rights reserved.","title":"Copyright"},{"location":"coding/","text":"Coding Convention Overall remove dependency between the codes as much as possible low level code must compile C++98 use double space for a tab Element Indexing Rule Based on the elemnt index rule in VTK Coordinate for the Depth Computation Naming Convention (cpp) use the extension \".h\" instead of \".hpp\" filename should be in lower case. The underscore represent depndency. For example \"aa_bb.cpp\" means this is a implementation of class \"aaa\" and it depends on a class \"bbb\" The function name should be written in camel case notation that sarts with upper case letter (e.g., Verb_Object_Adverb) Geometric Operator Nearest Intersection IsInside Volume Area Use Read <-> Write for the file io. Don't use Load <-> Save Naming Various Types of Points aXY -> general 2D point aXYZ-> general 3D point CAD vertex -> Vertex Mesh corner point -> Point FEM points it can be inside an element (may be on edge or on face) -> Node How to call a mesh? MeshTri3D MeshQuad2D MeshHex3D MeshMix3D MeshElem3D Point3D MeshHex3DSurface","title":"Coding Convention"},{"location":"coding/#coding-convention","text":"","title":"Coding Convention"},{"location":"coding/#overall","text":"remove dependency between the codes as much as possible low level code must compile C++98 use double space for a tab","title":"Overall"},{"location":"coding/#element-indexing-rule","text":"Based on the elemnt index rule in VTK","title":"Element Indexing Rule"},{"location":"coding/#coordinate-for-the-depth-computation","text":"","title":"Coordinate for the Depth Computation"},{"location":"coding/#naming-convention-cpp","text":"use the extension \".h\" instead of \".hpp\" filename should be in lower case. The underscore represent depndency. For example \"aa_bb.cpp\" means this is a implementation of class \"aaa\" and it depends on a class \"bbb\" The function name should be written in camel case notation that sarts with upper case letter (e.g., Verb_Object_Adverb) Geometric Operator Nearest Intersection IsInside Volume Area Use Read <-> Write for the file io. Don't use Load <-> Save Naming Various Types of Points aXY -> general 2D point aXYZ-> general 3D point CAD vertex -> Vertex Mesh corner point -> Point FEM points it can be inside an element (may be on edge or on face) -> Node How to call a mesh? MeshTri3D MeshQuad2D MeshHex3D MeshMix3D MeshElem3D Point3D MeshHex3DSurface","title":"Naming Convention (cpp)"},{"location":"example_cpp/","text":"Examples (C++) Build C++ Examples cd examples_cpp mkdir buildMake cd buildMake cmake .. make triangulation Transform Handler cloth_internal subdiv read_bvh exponential_map selfcollision_bvh edge_collapse","title":"Examples (C++)"},{"location":"example_cpp/#examples-c","text":"","title":"Examples (C++)"},{"location":"example_cpp/#build-c-examples","text":"cd examples_cpp mkdir buildMake cd buildMake cmake .. make","title":"Build C++ Examples"},{"location":"example_cpp/#triangulation","text":"","title":"triangulation"},{"location":"example_cpp/#transform-handler","text":"","title":"Transform Handler"},{"location":"example_cpp/#cloth_internal","text":"","title":"cloth_internal"},{"location":"example_cpp/#subdiv","text":"","title":"subdiv"},{"location":"example_cpp/#read_bvh","text":"","title":"read_bvh"},{"location":"example_cpp/#exponential_map","text":"","title":"exponential_map"},{"location":"example_cpp/#selfcollision_bvh","text":"","title":"selfcollision_bvh"},{"location":"example_cpp/#edge_collapse","text":"","title":"edge_collapse"},{"location":"example_py/","text":"Examples (Python) Build Python Module cd module_py mkdir buildMake cd buildMake cmake .. make You can also use pip to install the module_py using the setup.py pip install . - e Solving Poisson's Equation Here is the example solving the Poisson's equation on a 2D square domain. The value on the boundary is fixed and there is a source term. import dfm2 cad = dfm2 . Cad2D ( list_xy = [ - 1 , - 1 , + 1 , - 1 , + 1 , + 1 , - 1 , + 1.0 ]) mesh = cad . mesh ( 0.05 ) fem = dfm2 . FEM_Poisson ( mesh , source = 1.0 ) npIdP = cad . points_edge ([ 0 , 1 , 2 , 3 ], mesh . np_pos ) fem . ls . vec_bc [ npIdP ] = 1 fem . solve () field = dfm2 . Field ( mesh , val_color = fem . vec_val [:, 0 ]) dfm2 . winDraw3d ([ field ]) The code is implemented based o the note I wrote: Finite Element Method: Solving Poission's Equation . Solving Linear Solid Static 2D In this example the static linear solid equation is solved in the 2D square domain. The XY displacement on the left edge is fixed and the gravity is pulling the material in the direction of -Y axis. import dfm2 cad = dfm2 . Cad2D ( list_xy = [ - 1 , - 1 , + 1 , - 1 , + 1 , + 1 , - 1 , + 1.0 ]) mesh = cad . mesh ( 0.05 ) fem = dfm2 . FEM_LinearSolidStatic ( mesh , gravity = [ 0 , - 0.1 ]) npIdP = cad . points_edge ([ 3 ], mesh . np_pos ) fem . ls . vec_bc [ npIdP ,:] = 1 fem . solve () field = dfm2 . Field ( mesh , val_disp = fem . vec_val ) dfm2 . winDraw3d ([ field ]) The code is implementaed based on the note I wrote Finite Element Method: Solving Linear Solid Euqation .","title":"Examples (Python)"},{"location":"example_py/#examples-python","text":"","title":"Examples (Python)"},{"location":"example_py/#build-python-module","text":"cd module_py mkdir buildMake cd buildMake cmake .. make You can also use pip to install the module_py using the setup.py pip install . - e","title":"Build Python Module"},{"location":"example_py/#solving-poissons-equation","text":"Here is the example solving the Poisson's equation on a 2D square domain. The value on the boundary is fixed and there is a source term. import dfm2 cad = dfm2 . Cad2D ( list_xy = [ - 1 , - 1 , + 1 , - 1 , + 1 , + 1 , - 1 , + 1.0 ]) mesh = cad . mesh ( 0.05 ) fem = dfm2 . FEM_Poisson ( mesh , source = 1.0 ) npIdP = cad . points_edge ([ 0 , 1 , 2 , 3 ], mesh . np_pos ) fem . ls . vec_bc [ npIdP ] = 1 fem . solve () field = dfm2 . Field ( mesh , val_color = fem . vec_val [:, 0 ]) dfm2 . winDraw3d ([ field ]) The code is implemented based o the note I wrote: Finite Element Method: Solving Poission's Equation .","title":"Solving Poisson's Equation"},{"location":"example_py/#solving-linear-solid-static-2d","text":"In this example the static linear solid equation is solved in the 2D square domain. The XY displacement on the left edge is fixed and the gravity is pulling the material in the direction of -Y axis. import dfm2 cad = dfm2 . Cad2D ( list_xy = [ - 1 , - 1 , + 1 , - 1 , + 1 , + 1 , - 1 , + 1.0 ]) mesh = cad . mesh ( 0.05 ) fem = dfm2 . FEM_LinearSolidStatic ( mesh , gravity = [ 0 , - 0.1 ]) npIdP = cad . points_edge ([ 3 ], mesh . np_pos ) fem . ls . vec_bc [ npIdP ,:] = 1 fem . solve () field = dfm2 . Field ( mesh , val_disp = fem . vec_val ) dfm2 . winDraw3d ([ field ]) The code is implementaed based on the note I wrote Finite Element Method: Solving Linear Solid Euqation .","title":"Solving Linear Solid Static 2D"}]}